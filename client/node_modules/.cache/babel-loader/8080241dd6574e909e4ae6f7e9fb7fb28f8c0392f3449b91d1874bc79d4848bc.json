{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\ASUS\\\\Desktop\\\\koya\\\\koya-restaurant\\\\client\\\\src\\\\components\\\\ProtectedRoute.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\n\n/**\r\n * A wrapper for routes that should only be accessible to authenticated users.\r\n * If the user is not authenticated, they will be redirected to the login page.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoute = ({\n  element\n}) => {\n  _s();\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  const location = useLocation();\n  useEffect(() => {\n    // Check if the user is authenticated\n    const isAdminLoggedIn = localStorage.getItem('isAdminLoggedIn');\n    setIsAuthenticated(isAdminLoggedIn === 'true');\n  }, []);\n\n  // Show nothing while we're checking authentication\n  if (isAuthenticated === null) {\n    return null;\n  }\n\n  // Redirect to login if not authenticated\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/admin/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Render the protected component if authenticated\n  return element;\n};\n_s(ProtectedRoute, \"MjMsKO5GFGeATT/DFEucmdjZmDA=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoute;\nexport default ProtectedRoute;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoute\");","map":{"version":3,"names":["React","useEffect","useState","Navigate","useLocation","jsxDEV","_jsxDEV","ProtectedRoute","element","_s","isAuthenticated","setIsAuthenticated","location","isAdminLoggedIn","localStorage","getItem","to","state","from","replace","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["c:/Users/ASUS/Desktop/koya/koya-restaurant/client/src/components/ProtectedRoute.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\n\r\n/**\r\n * A wrapper for routes that should only be accessible to authenticated users.\r\n * If the user is not authenticated, they will be redirected to the login page.\r\n */\r\nconst ProtectedRoute = ({ element }) => {\r\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    // Check if the user is authenticated\r\n    const isAdminLoggedIn = localStorage.getItem('isAdminLoggedIn');\r\n    setIsAuthenticated(isAdminLoggedIn === 'true');\r\n  }, []);\r\n\r\n  // Show nothing while we're checking authentication\r\n  if (isAuthenticated === null) {\r\n    return null;\r\n  }\r\n\r\n  // Redirect to login if not authenticated\r\n  if (!isAuthenticated) {\r\n    return <Navigate to=\"/admin/login\" state={{ from: location }} replace />;\r\n  }\r\n\r\n  // Render the protected component if authenticated\r\n  return element;\r\n};\r\n\r\nexport default ProtectedRoute;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;;AAExD;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAIA,MAAMC,cAAc,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EACtC,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAMU,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAE9BH,SAAS,CAAC,MAAM;IACd;IACA,MAAMY,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;IAC/DJ,kBAAkB,CAACE,eAAe,KAAK,MAAM,CAAC;EAChD,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAIH,eAAe,KAAK,IAAI,EAAE;IAC5B,OAAO,IAAI;EACb;;EAEA;EACA,IAAI,CAACA,eAAe,EAAE;IACpB,oBAAOJ,OAAA,CAACH,QAAQ;MAACa,EAAE,EAAC,cAAc;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAEN;MAAS,CAAE;MAACO,OAAO;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC1E;;EAEA;EACA,OAAOf,OAAO;AAChB,CAAC;AAACC,EAAA,CAtBIF,cAAc;EAAA,QAEDH,WAAW;AAAA;AAAAoB,EAAA,GAFxBjB,cAAc;AAwBpB,eAAeA,cAAc;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}